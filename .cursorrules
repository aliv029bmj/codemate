# Code566 Project Rules
# Purpose: Build a fun and modular VS Code extension that enhances the line/column indicator using interactive and creative modes.

[PROJECT]
name=Code566
type=vscode-extension
language=TypeScript
compatible_editors=VSCode, CursorAI
strict_mode=true ; Prevent AI from generating redundant content, placeholder data, or off-scope logic.

[GOALS]
primary=Enhance the standard line/column display with fun user modes
secondary=Support interactive mode switching via Command Palette and Settings UI
tertiary=Ensure all modes are modular, reusable, and independently testable

[MODES]
total=6
mode_1=StoryMode        ; Display a tiny part of a story on every line/column move
mode_2=PixelPet         ; Show a virtual pet that reacts to coding behavior
mode_3=MusicByCode      ; Play dynamic music based on line and column activity
mode_4=RiddleMode       ; Display a new riddle at each line change
mode_5=TravelMode       ; Virtually "travel" to a new city based on line/column
mode_6=StatsHUD         ; Show a stats dashboard with useful real-time info

[UI]
status_bar_display=true             ; Custom status bar item that reflects current mode
mode_switcher_command=true         ; Enable command in Command Palette for switching modes
settings_panel_entry=true          ; Enable persistent mode config via settings
persistent_state=true              ; Store selected mode in globalState for session continuity

[FILES]
entry_file=src/extension.ts
mode_directory=src/modes/
utility_directory=src/utils/
mode_interface_file=src/types/IMode.ts

mode_file_template:
  - Must export: activateMode(context, line, col)
  - Must only include code related to that mode
  - Must not manipulate or define global state directly

[EVENTS]
cursor_position_change=Trigger mode behavior
document_text_change=Optionally used for animation or logic
on_command=Switch mode and reload the active one

[COMMANDS]
code566.selectMode         ; Open mode selector menu
code566.toggleStats        ; Toggle HUD visibility (for Stats mode)

[EXTENSION_BEHAVIOR_RULES]
- AI must not generate full implementations unless explicitly asked.
- Do not invent city names, music data, stories, pets, or riddles unless instructed.
- Every feature must follow modular and scalable architecture.
- Avoid repetition after code blocks unless user asks for explanation.
- Do not include inline logic in the main file, except for bootstrapping the extension.
- All user-facing UI must be minimal and non-obtrusive unless otherwise requested.

[QUALITY_CONTROL]
require_ts_lint=true
require_commented_code=true
no_placeholder_spam=true
no_autogenerated_filler=true
code_must_match_structure=true
follow_user_intent_strictly=true

[TESTING]
mock_story_generator=true
mock_music_sequence=true
mock_pixel_pet_behavior=true
mock_city_database=true
mock_riddle_bank=true

[USER_OVERRIDES]
allow_custom_mode_addition=true
allow_feature_disabling=true

[EXTRA]
versioning_scheme=semver
build_vsix_package=true
auto_refresh_on_mode_change=true
compatible_with_cursor_ai=true
